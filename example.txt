0、Empty-Template:
================================================================================
//
// AppDelegate.h
//
#import <UIKit/UIKit.h>

@interface AppDelegate : UIResponder <UIApplicationDelegate>

@property (strong, nonatomic) UIWindow *window;

@end

//
// AppDelegate.m
//
#import "AppDelegate.h"

@implementation AppDelegate
- (void)dealloc
{
    [_window release];
    [super dealloc];
}

- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions
{
    self.window = [[[UIWindow alloc] initWithFrame:[[UIScreen mainScreen] bounds]] autorelease];
    // Override point for customization after application launch.
    self.window.backgroundColor = [UIColor whiteColor];
    [self.window makeKeyAndVisible];
    return YES;
}

//
// main.m
//
#import <UIKit/UIKit.h>
#import "AppDelegate.h"

int main(int argc, char *argv[])
{
    @autoreleasepool {
        return UIApplicationMain(argc, argv, nil, NSStringFromClass([AppDelegate class]));
    }
}


1、UIWindow:
================================================================================
//
// AppDelegate.h
//
#import <UIKit/UIKit.h>

@interface AppDelegate : UIResponder <UIApplicationDelegate>

@property (strong, nonatomic) UIWindow *window;

@end

//
// AppDelegate.m
//
#import "AppDelegate.h"

@implementation AppDelegate

- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions
{
    self.window = [[UIWindow alloc] initWithFrame:[[UIScreen mainScreen] bounds]];
    //*******************************************************************************
    //上面这句是创建一个UIWindow实例，Frame为“[[UIScreen mainScreen] bounds]”的返回 CGRect
    //在这里我们可以用 CGRectMake(0, 0, 100, 100) 自己重新定制UIWindow 的 Frame
    //self.window = [[UIWindow alloc] initWithFrame:CGRectMake(0, 0, 100, 100)];
    //*******************************************************************************

    // Override point for customization after application launch.
    self.window.backgroundColor = [UIColor whiteColor];
    //*******************************************************************************
    //上面这句是修改self.window 这个实例的 backgroundColor 属性,
    //我们可以把它改成红色
    //self.window.backgroundColor = [UIColor redColor];
    //或者使用RBG颜色 r g b 取值区间为 0~1
    //self.window.backgroundColor = [UIColor colorWithRed:1 green:0 blue:0 alpha:1];
    //或者使用图片
    //UIImage *backImage = [UIImage imageNamed:@"background"];
    //self.window.backgroundColor = [UIColor colorWithPatternImage:backImage];
    //*******************************************************************************
    
    //*******************************************************************************
    //另外 按住command 鼠标点击 UIWindow 可以看到，UIWindow是继承自UIView，也就是说你看到的UIWindow本质也是一个UIView
    //所以，UIWindow有UIView的一切属性，可以自己修改看看效果
    //*******************************************************************************
    
    //*******************************************************************************
    //本Demo结束，以后如果有类之间的跳转，我会给出跳转提示
    //*******************************************************************************
    
    [self.window makeKeyAndVisible];
    return YES;
}

//
// main.m
//
#import <UIKit/UIKit.h>
#import "AppDelegate.h"

int main(int argc, char *argv[])
{
    @autoreleasepool {
        return UIApplicationMain(argc, argv, nil, NSStringFromClass([AppDelegate class]));
    }
}


2、UIView:
================================================================================
//
// AppDelegate.h
//
#import <UIKit/UIKit.h>

@interface AppDelegate : UIResponder <UIApplicationDelegate>

@property (strong, nonatomic) UIWindow *window;

@end

//
// AppDelegate.m
//
#import "AppDelegate.h"

@implementation AppDelegate

- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions
{
    self.window = [[UIWindow alloc] initWithFrame:[[UIScreen mainScreen] bounds]];
    //*******************************************************************************
    //在上一个Demo中我们了解了基本的UIWindow的创建。下面我们继续学习如何在我们的UIWindow上添加 UIView
    //*******************************************************************************
    
    //*******************************************************************************
    //实例化一个UIView 左上角为坐标原点
    UIView *myView = [[UIView alloc] initWithFrame:CGRectMake(10/* x */, 10/* y */, 200/* width */, 200/* height */)];
    //修改myView的背景色为红色
    myView.backgroundColor = [UIColor redColor];
    //把myView添加到我们的UIWindow self.window上 
    [self.window addSubview:myView];
    //*******************************************************************************
    
    //*******************************************************************************
    //编译运行 你会发现，还有个运营商信息、电池信息那一栏（状态栏），他们的高度为20 所以挡住了我们的UIView
    //你可以在这里修改myView的frame,也可以回到初始化myView的地方 25行 修改，随你。
    [myView setFrame:CGRectMake(10, 30, 200, 200)];
    //再次 编译运行，你可以看到 我们的view离 状态栏 也有10个像素了
    //*******************************************************************************
    
    //*******************************************************************************
    //编外篇 其实刚才我们还有一个选择，不修改myView的frame，而是隐藏状态栏。
    //[[UIApplication sharedApplication] setStatusBarHidden:TRUE];
    //*******************************************************************************
    
    //*******************************************************************************
    //到这里我们已经学会了怎样用代码在 window 上添加 view 了，但是在一般的工程中，我们基本不会在当前类里管理我们的视图。
    //下一个 Demo我们继续学习 怎样在UIWindow上添加 UIViewController（视图控制器）
    //*******************************************************************************

    // Override point for customization after application launch.
    self.window.backgroundColor = [UIColor whiteColor];
    [self.window makeKeyAndVisible];
    return YES;
}


3、UIViewController:
================================================================================
//
// ViewController.h
//
#import <UIKit/UIKit.h>

@interface ViewController : UIViewController

@end

//
// ViewController.m
//
#import "ViewController.h"

@implementation ViewController

- (id)initWithNibName:(NSString *)nibNameOrNil bundle:(NSBundle *)nibBundleOrNil
{
    self = [super initWithNibName:nibNameOrNil bundle:nibBundleOrNil];
    if (self) {
        // Custom initialization
    }
    return self;
}

- (void)viewDidLoad
{
    [super viewDidLoad];
    self.view.backgroundColor = [UIColor greenColor];
}

//
// AppDelegate.h
//
#import <UIKit/UIKit.h>

@interface AppDelegate : UIResponder <UIApplicationDelegate>

@property (strong, nonatomic) UIWindow *window;

@end

//
// AppDelegate.m
//
#import "AppDelegate.h"
#import "ViewController.h"

@implementation AppDelegate

- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions
{
    self.window = [[UIWindow alloc] initWithFrame:[[UIScreen mainScreen] bounds]];
    // Override point for customization after application launch.
    
    //*******************************************************************************
    //上一个DEMO我们已经学会了怎样用代码在 window 上添加 view 了，但是在一般的工程中，我们基本不会在当前类里管理我们的视图。
    //这里我们继续学习 怎样在UIWindow上添加 UIViewController（视图控制器）
    //*******************************************************************************
    
    //创建 ViewController
    //这里我创建的是 ViewController。你可以创建你的XXXViewController
    //*******************************************************************************
    //首先我们继承UIViewController 创建我们自己的 ViewController
    //1、鼠标定位到 左侧 LUIViewController 文件组上
    //2、右键-》New File
    //3、选择Cocoa Touch 栏目下的 Objective-C Class 点击next
    //4、填好类名 这里我写的是 ViewController， subclass of 为 UIViewController
    //5、选择好要存放文件的文件夹 Create
    //*******************************************************************************
    
    //添加 ViewController
    //*******************************************************************************
    //引入头文件 #import "ViewController.h"，我们就可以使用我们的类了。第10行
    //以下两种实例化方式都可以，任选一种用之
    //ViewController *viewController = [[ViewController alloc] init];
    
    //由于我们没有nib文件，所以我们这里用 initWithNibName:nil bundle:nil 初始化
    ViewController *viewController = [[ViewController alloc] initWithNibName:nil bundle:nil];
    
    //*******************************************************************************
    //这里我们可以把 viewController 设为self.window 的rootViewController
    //在setRootViewController里会自动帮我们把viewController.view 添加到 self.window 上
    self.window.rootViewController = viewController;
    //*******************************************************************************
    //我们的视图控制器 viewController 顾名思义，他也是有视图部分的 就是它的属性 view
    //所以我们也可以手动把 viewController.view 添加到 self.window 上, 注释掉 46行 开启 49行
    //[self.window addSubview:viewController.view];
    //*******************************************************************************
    
    //*******************************************************************************
    //编译运行 你会发现我们的视图是绿色的，没错，是我在 ViewController.m文件 的视图加载时干的
    //到这里你已经学会了创建 并添加 UIViewController 了
    //下一个DEMO我们继续学习如何在 UIViewController中加载 UIView UIImageView(一幅图片) UILabel（文字标签）
    //*******************************************************************************
    
    self.window.backgroundColor = [UIColor whiteColor];
    [self.window makeKeyAndVisible];
    return YES;
}


4、UIImageViewUILabel:
================================================================================
//
// ViewController.h
//
#import <UIKit/UIKit.h>

@interface ViewController : UIViewController

@end

//
// ViewController.m
//
#import "ViewController.h"

@implementation ViewController

- (void)viewDidLoad
{
    [super viewDidLoad];
    // Do any additional setup after loading the view, typically from a nib.
    
    self.view.backgroundColor = [UIColor darkGrayColor];
    
    //*******************************************************************************
    //在上一个Demo中我们学习了 如何创建ViewController
    //这里我们学习下如何添加
    // UIView UIImageView UILabel
    //*******************************************************************************
    
    //首先我们先分别添加 UIView   UIImageView   UILabel 3个控件到self.view 上
    //*******************************************************************************
    UIView *view = [[UIView alloc] initWithFrame:CGRectMake(10, 10, 200, 100)];
    view.backgroundColor = [UIColor colorWithRed:1 green:0 blue:0 alpha:0.6];
    [self.view addSubview:view];
    
    UIImageView *imageView = [[UIImageView alloc] initWithFrame:CGRectMake(10, 120, 200, 100)];
    imageView.backgroundColor = [UIColor colorWithRed:0 green:1 blue:0 alpha:0.6];
    [self.view addSubview:imageView];
    
    UILabel *label = [[UILabel alloc] initWithFrame:CGRectMake(10, 230, 200, 100)];
    label.backgroundColor = [UIColor colorWithRed:0 green:0 blue:1 alpha:0.6];
    [self.view addSubview:label];
    //编译运行。我们会看到3个控件除了我们分别设置的背景色 r g b 不同其余都一样，
    //查看他们的头文件可见，他们都是UIView的子类,本质上就是UIView，不过是根据自己的需求定制化了不同的功能而已
    //*******************************************************************************
    
    //下面我们分别设置 imageView、 label 的各自属性 来看看他们的不同, 48 49行去掉注释
    //*******************************************************************************
    //imageView.image = [UIImage imageNamed:@"mao.jpg"];
    //label.text = @"这是一只猫。";
    //编译运行。 到这里我们可以看到他们各自独特的属性，一个可以设置图片属性，一个可以设置文字属性。
    
    //以下是UILabel的一些其他属性，你可以试着修改，并观察效果。
    //    label.font = [UIFont systemFontOfSize:60];
    //    label.textColor = [UIColor whiteColor];
    //    label.shadowColor = [UIColor yellowColor];
    //    label.shadowOffset = CGSizeMake(1, 1);
    //    label.textAlignment = NSTextAlignmentCenter;
    //    label.lineBreakMode = NSLineBreakByCharWrapping;
    //    label.numberOfLines = 2;
    //*******************************************************************************
}

//
// AppDelegate.h
//
#import <UIKit/UIKit.h>

@class ViewController;

@interface AppDelegate : UIResponder <UIApplicationDelegate>

@property (strong, nonatomic) UIWindow *window;

@property (strong, nonatomic) ViewController *viewController;

@end

//
// AppDelegate.m
//
#import "AppDelegate.h"
#import "ViewController.h"

@implementation AppDelegate

- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions
{
    self.window = [[UIWindow alloc] initWithFrame:[[UIScreen mainScreen] bounds]];
    // Override point for customization after application launch.
    self.viewController = [[ViewController alloc] initWithNibName:@"ViewController" bundle:nil];
    self.window.rootViewController = self.viewController;
    [self.window makeKeyAndVisible];
    return YES;
}


5、UIButtonUITextField:
================================================================================
//
// ViewController.h
//
#import <UIKit/UIKit.h>

@interface ViewController : UIViewController

@end

//
// ViewController.m
//
#import "ViewController.h"

// 引入UITextField、UITextView需要的委托
@interface ViewController ()<UITextFieldDelegate, UITextViewDelegate> {
    //在这里声明全局 私有变量
    UITextField *textField;
    UITextView  *textView;
}

@end

@implementation ViewController

- (void)viewDidLoad
{
    [super viewDidLoad];
    // Do any additional setup after loading the view, typically from a nib.
    
    self.view.backgroundColor = [UIColor whiteColor];
    //*******************************************************************************
    //在上一个Demo中我们学习了 如何添加   UIView UIImageView UILabel
    //这里我们学习下 如何添加   UIButton UITextField UITextView
    //*******************************************************************************
    
    //添加 UITextField UIButton 2个控件到self.view 上
    //*******************************************************************************
    //UITextField 是继承自 UIControl，UIControl又是继承自UIView，所以UITextField 具有UIControl和UIView的所有属性。
    textField = [[UITextField alloc] initWithFrame:CGRectMake(10, 10, 200, 40)];
    textField.backgroundColor = [UIColor colorWithRed:0.5 green:0.5 blue:0 alpha:0.5];
    textField.borderStyle = UITextBorderStyleRoundedRect;                        //设置边框类型
    //inputText.background = [UIImage imageNamed:@""];                           //设置背景图片
    textField.delegate = self;                                                   //设置委托对象
    textField.contentVerticalAlignment = UIControlContentVerticalAlignmentCenter;//文字内容 垂直居中，此为UIControl的属性
    [self.view addSubview:textField];
    textField.placeholder = @"请输入文字";                                         //设置默认提示文字
    //[inputText becomeFirstResponder];                                          //这句可以在初始化的时候，就使inputText变成第一响应者 弹出键盘
    
    //UIButton 是继承自 UIControl，具有UIControl和UIView的所有属性。
    UIButton *textFieldButton = [[UIButton alloc] initWithFrame:CGRectMake(220, 10, 90, 40)];
    textFieldButton.backgroundColor = [UIColor redColor];
    [textFieldButton setTitle:@"清除文字" forState:UIControlStateNormal];                //设置正常状态下 Button标题
    [textFieldButton setTitleColor:[UIColor blackColor] forState:UIControlStateNormal]; //设置正常状态下 Button标题颜色
    [textFieldButton addTarget:self action:@selector(onTextFieldButtonClicked:) forControlEvents:UIControlEventTouchUpInside];
    //addTarget:self 设置响应点击事件的对象
    //action:@selector(onTextFieldButtonClicked:) 设置响应点击事件的对象的方法函数，我们在下面会声明这个函数
    [self.view addSubview:textFieldButton];
    //*******************************************************************************
    
    //添加 UITextView UIButton 2个控件到self.view 上
    //*******************************************************************************
    //UITextField 是继承自 UIControl，UIControl又是继承自UIView，所以UITextField 具有UIControl和UIView的所有属性。
    textView = [[UITextView alloc] initWithFrame:CGRectMake(10, 60, 200, 200)];
    textView.backgroundColor = [UIColor colorWithRed:0.5 green:0.5 blue:0 alpha:0.5];
    textView.font = [UIFont systemFontOfSize:18];
    textView.textColor = [UIColor redColor];
    textView.textAlignment = NSTextAlignmentLeft;                                 //设置左对齐，默认也是
    textView.editable = YES;                                                      //设置为可编辑，默认也是
    textView.delegate = self;
    [self.view addSubview:textView];
    
    //UIButton 是继承自 UIControl，具有UIControl和UIView的所有属性。
    UIButton *textViewButton = [[UIButton alloc] initWithFrame:CGRectMake(220, 140, 90, 40)];
    textViewButton.backgroundColor = [UIColor redColor];
    [textViewButton setTitle:@"清除文字" forState:UIControlStateNormal];
    [textViewButton setTitleColor:[UIColor blackColor] forState:UIControlStateNormal];
    [textViewButton addTarget:self action:@selector(onTextViewButtonClicked:) forControlEvents:UIControlEventTouchUpInside];
    //addTarget:self 设置响应点击事件的对象
    //action:@selector(onTextFieldButtonClicked:) 设置响应点击事件的对象的方法函数，我们在下面会声明这个函数
    [self.view addSubview:textViewButton];
    //*******************************************************************************
    
    //*******************************************************************************
    //这里我们学习下 如何添加   UIButton UITextField UITextView
    //下一个Demo中我们学习 如何添加 UIScrollView
    //*******************************************************************************
    
}

//以下是UITextFieldDelegate 的部分委托实现
#pragma mark -------------------
#pragma mark UITextFieldDelegate

- (BOOL)textFieldShouldBeginEditing:(UITextField *)textField{
    // return NO to disallow editing.
    return YES;
}
- (void)textFieldDidBeginEditing:(UITextField *)textField{
    // became first responder
    // 在这里监听UITextField becomeFirstResponder事件
}
- (BOOL)textFieldShouldEndEditing:(UITextField *)textField{
    // return YES to allow editing to stop and to resign first responder status. NO to disallow the editing session to end
    return YES;
}
- (void)textFieldDidEndEditing:(UITextField *)textField{
    // may be called if forced even if shouldEndEditing returns NO (e.g. view removed from window) or endEditing:YES called
    // 在这里监听UITextField resignFirstResponder事件
}
- (BOOL)textField:(UITextField *)_textField shouldChangeCharactersInRange:(NSRange)range replacementString:(NSString *)string{
    // return NO to not change text
    NSLog(@"inputText: %@", textField.text);
    return YES;
}

#pragma mark -------------------
#pragma mark textFieldButton 的响应函数
- (void)onTextFieldButtonClicked:(UIButton*)button{
    [textView resignFirstResponder];
    [textField resignFirstResponder];
    textField.text = @"";
}

//以下是UITextViewDelegate 的部分委托实现
#pragma mark -------------------
#pragma mark UITextViewDelegate

- (BOOL)textViewShouldBeginEditing:(UITextView *)textView{
    // return NO to disallow editing.
    return YES;
}
- (void)textViewDidBeginEditing:(UITextView *)textView{
    // became first responder
    // 在这里监听UITextView becomeFirstResponder事件
}
- (BOOL)textViewShouldEndEditing:(UITextView *)textView{
    // return YES to allow editing to stop and to resign first responder status. NO to disallow the editing session to end
    return YES;
}
- (void)textViewDidEndEditing:(UITextView *)textView{
    // may be called if forced even if shouldEndEditing returns NO (e.g. view removed from window) or endEditing:YES called
    // 在这里监听UITextView resignFirstResponder事件
}
- (void)textViewDidChangeSelection:(UITextView *)_textView{
    NSLog(@"textView: %@", textView.text);
}

#pragma mark -------------------
#pragma mark textViewButton 的响应函数
- (void)onTextViewButtonClicked:(UIButton*)button{
    [textView resignFirstResponder];
    [textField resignFirstResponder];
    textView.text = @"";
}

//
// AppDelegate.h
//
#import <UIKit/UIKit.h>

@class ViewController;

@interface AppDelegate : UIResponder <UIApplicationDelegate>

@property (strong, nonatomic) UIWindow *window;

@property (strong, nonatomic) ViewController *viewController;

@end

//
// AppDelegate.m
//
#import "AppDelegate.h"
#import "ViewController.h"

@implementation AppDelegate

- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions
{
    self.window = [[UIWindow alloc] initWithFrame:[[UIScreen mainScreen] bounds]];
    // Override point for customization after application launch.
    self.viewController = [[ViewController alloc] initWithNibName:nil bundle:nil];
    self.window.rootViewController = self.viewController;
    [self.window makeKeyAndVisible];
    return YES;
}


6、UIScrollView:
================================================================================
//
// ViewController.h
//
#import <UIKit/UIKit.h>

@interface ViewController : UIViewController

@end

//
// ViewController.m
//
#import "ViewController.h"

@interface ViewController ()<UIScrollViewDelegate>

@end

@implementation ViewController

- (void)viewDidLoad
{
    [super viewDidLoad];
    // Do any additional setup after loading the view, typically from a nib.
    
    //*******************************************************************************
    //在上两个Demo中我们学习了 如何添加   UIView UIImageView UILabel UIButton UITextField UITextView
    //这里我们学习下 如何使用 UISCrollView
    //*******************************************************************************
    
    CGRect frame = [self.view bounds];//这里使用bounds是为了适配那些高帅富iphone5的屏幕高度，要不我就直接写460或480(隐藏状态栏时的屏幕高度)了，TT
    
    UIScrollView *background = [[UIScrollView alloc] initWithFrame:CGRectMake(0, 0, frame.size.width, frame.size.height)];
    [self.view addSubview:background];
    background.backgroundColor = [UIColor colorWithRed:0.5 green:0.5 blue:0 alpha:0.5];
    //到这里 我们已经往屏幕上成功的添加一个scrollView了
    //*******************************************************************************
    UILabel *label = [[UILabel alloc] initWithFrame:CGRectMake(10, 200, 300, 40)];
    label.text = @"这是UISCrollView";
    [background addSubview:label];
    //这里我们添加一个label 到background 上，来帮助我们观察background 的移动
    
    //编译运行.
    //是不是什么效果也没有，也不滚动?
    //*******************************************************************************
    //现在，我们就再设置几个属性
    //contentSize;                    // default CGSizeZero
    background.contentSize = CGSizeMake(320, frame.size.height+100);//这里设置background 的contentSize（内容区）比它的frame高度高 100，
    //编译运行. 我们可以看到上下拖动屏幕可以滚动了。
    
    //再试一试改变宽度
    //background.contentSize = CGSizeMake(320+300, frame.size.height);//这里设置background 的contentSize（内容区）比它的frame宽度宽 100，
    //记住：只有当contentSize 的宽度或高度 大于 frame的宽度或者高度时，它才能横向或者纵向滚动。
    //*******************************************************************************
    
    //contentOffset;                  // default CGPointZero
    //background.contentOffset = CGPointMake(100, 200);//这里设置background 的偏移量 x=100相当于 从右向左 拖动100个像素距离， 同理y=200
    
    //contentInset;                   // default UIEdgeInsetsZero. add additional scroll area around content
    //background.contentInset = UIEdgeInsetsMake(40, 0, 0, 40);//这里依次为 top left bottom right，相当于在四个方向上额外加的 可滚动区域

    //delegate;                       // default nil. weak reference
    background.delegate = self;//这里设置委托对象为VC自己，同样需要在@interface ViewController处加上委托，然后在下面实现委托的方法
    
    //scrollEnabled;                  // default YES. turn off any dragging temporarily
    //background.contentInset = NO;//设置为禁止滚动，在某些时候需要用到
    //这里我们已经学会 如何使用 UISCrollView 的基本功能
    //*******************************************************************************
    //作为练习
    //我们可以根据需要把我们之前学过的 UIView UIImageView UILabel UITextField UITextView UIButton 添加到 UIScrollView（background）上来
    
    //*******************************************************************************
    //下一节我们学习 如何使用UITableView 和 UITableViewCell
    //*******************************************************************************


}

#pragma mark -------------------
#pragma mark UITextFieldDelegate
- (void)scrollViewDidScroll:(UIScrollView *)scrollView{
    // any offset changes
    NSLog(@"%f",scrollView.contentOffset.y);//这里我们输出 scrollView的纵向 偏移量
}

// called on start of dragging (may require some time and or distance to move)
- (void)scrollViewWillBeginDragging:(UIScrollView *)scrollView{
    NSLog(@"scrollViewWillBeginDragging");
}

// called on finger up if the user dragged. decelerate is true if it will continue moving afterwards
- (void)scrollViewDidEndDragging:(UIScrollView *)scrollView willDecelerate:(BOOL)decelerate{
    NSLog(@"scrollViewDidEndDragging willDecelerate");
}

// called on finger up as we are moving
- (void)scrollViewWillBeginDecelerating:(UIScrollView *)scrollView{
    NSLog(@"scrollViewWillBeginDecelerating");
}

// called when scroll view grinds to a halt
- (void)scrollViewDidEndDecelerating:(UIScrollView *)scrollView{
    NSLog(@"scrollViewDidEndDecelerating");
}

//
// AppDelegate.h
//
#import <UIKit/UIKit.h>

@class ViewController;

@interface AppDelegate : UIResponder <UIApplicationDelegate>

@property (strong, nonatomic) UIWindow *window;

@property (strong, nonatomic) ViewController *viewController;

@end

//
// AppDelegate.m
//
#import "AppDelegate.h"
#import "ViewController.h"

@implementation AppDelegate

- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions
{
    self.window = [[UIWindow alloc] initWithFrame:[[UIScreen mainScreen] bounds]];
    // Override point for customization after application launch.
    self.viewController = [[ViewController alloc] initWithNibName:@"ViewController" bundle:nil];
    self.window.rootViewController = self.viewController;
    [self.window makeKeyAndVisible];
    return YES;
}


7、UITableView:
================================================================================
//
// ViewController.h
//
#import <UIKit/UIKit.h>

@interface ViewController : UIViewController

@end

//
// ViewController.m
//
#import "ViewController.h"

//*******************************************************************************
//这里我们添加UITableView 的两个委托 
//*******************************************************************************
@interface ViewController ()<UITableViewDataSource, UITableViewDelegate>{
    NSArray *dataArray;
}

@end

@implementation ViewController

- (void)viewDidLoad
{
    [super viewDidLoad];
    // Do any additional setup after loading the view, typically from a nib.
    CGRect frame = [self.view bounds];
    UITableView *tableView = [[UITableView alloc] initWithFrame:CGRectMake(0, 0, frame.size.width, frame.size.height)];
    tableView.dataSource = self;
    tableView.delegate = self;
    [self.view addSubview:tableView];
    
    dataArray = [NSArray arrayWithObjects:
                 @"Google", @"百　度", @"网　易", @"微 博", @"优 酷 网", @"淘 宝 网",
                 @"亚 马 逊", @"艺龙酒店", @"美 团 网", @"上品折扣", @"C N T V", @"腾  讯",
                 @"新  浪", @"当　当", @"凤 凰 网", @"MSN中文网", @"猫　扑", @"",nil];
    [tableView reloadData];
    
}

- (void)didReceiveMemoryWarning
{
    [super didReceiveMemoryWarning];
    // Dispose of any resources that can be recreated.
}

#pragma mark -------------------
#pragma mark UITableViewDataSource
//委托里 @required 的必须实现

- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section{
    return [dataArray count];
}

- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath{
    static NSString *CellIdentifier = @"UITableViewCell";
    UITableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:CellIdentifier];
    if (cell == nil) {
        cell = [[UITableViewCell alloc] initWithStyle:UITableViewCellStyleDefault reuseIdentifier:CellIdentifier];
    }
    //config the cell
    cell.textLabel.text = [dataArray objectAtIndex:indexPath.row];
    return cell;
}


#pragma mark -------------------
#pragma mark UITableViewDelegate
- (CGFloat)tableView:(UITableView *)tableView heightForRowAtIndexPath:(NSIndexPath *)indexPath{
    return 80;
}

- (void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath{
    NSLog(@"%@", [dataArray objectAtIndex:indexPath.row]);
}

//
// AppDelegate.h
//
#import <UIKit/UIKit.h>

@class ViewController;

@interface AppDelegate : UIResponder <UIApplicationDelegate>

@property (strong, nonatomic) UIWindow *window;

@property (strong, nonatomic) ViewController *viewController;

@end

//
// AppDelegate.m
//
#import "AppDelegate.h"
#import "ViewController.h"

@implementation AppDelegate

- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions
{
    self.window = [[UIWindow alloc] initWithFrame:[[UIScreen mainScreen] bounds]];
    // Override point for customization after application launch.
    self.viewController = [[ViewController alloc] initWithNibName:@"ViewController" bundle:nil];
    self.window.rootViewController = self.viewController;
    [self.window makeKeyAndVisible];
    return YES;
}


8、UITableViewCustomCell:
================================================================================
//
// CustomView.h
//
@interface CustomView : UIView

@property (nonatomic, strong) NSString *model;

@end

//
// CustomView.m
//
#import "CustomView.h"

@implementation CustomView

@synthesize model = _model;

- (id)initWithFrame:(CGRect)frame{
    self = [super initWithFrame:frame];
    if (self) {
        //*******************************************************************************
        //设置 背景透明或其他颜色，不然多次重绘时之前绘制的内容都还在，会叠加到一块儿
        //*******************************************************************************
        self.backgroundColor = [UIColor clearColor];
    }
    return self;
}

- (void)drawRect:(CGRect)rect{
    //*******************************************************************************
    //绘制Cell内容，NSString UIImage 等有drawInRect或者drawAtPoint 方法的都可以在这里绘制
    //*******************************************************************************
    [[UIColor redColor] set];

    //绘制一张图片
    UIImage *image = [UIImage imageNamed:@"headImage.jpg"];
    //[image drawAtPoint:CGPointMake(5, 5)];
    [image drawInRect:CGRectMake(5, 5, 50, 50)];
    
    //绘制一个字符串 drawInRect: 在某个区域内 withFont: 以什么字体
    [_model drawInRect:CGRectMake(60, 5, 200, 30) withFont:[UIFont systemFontOfSize:18]];
    
    [[UIColor greenColor] set];
    //绘制图形
    CGContextRef context = UIGraphicsGetCurrentContext();
    UIGraphicsPushContext(context);
    CGContextBeginPath(context);
    //*******************************************************************************
    //这之间的内容决定你画的是什么图形
    CGContextAddArc(context, 70, 40, 10, 0.0, 2*M_PI, NO);// (70, 40)为圆心 10 是半径
    //这之间的内容决定你画的是什么图形
    //*******************************************************************************
    CGContextFillPath(context);
    UIGraphicsPopContext();
    //*******************************************************************************
    //根据需要，你可以在这里绘制Cell内容来定制你的cell
    //那些不需要响应点击等事件的元素都可以绘制到CustomView上
    //需要响应点击事件等的UIView，如UIButton则需要addSubview到cell.contentView上
    //*******************************************************************************
}

- (void)setModel:(NSString *)model{
    _model = model;
    //这里setNeedsDisplay 重绘自己
    [self setNeedsDisplay];
}

//
// CustomCell.h
//
#import <UIKit/UIKit.h>

@interface CustomCell : UITableViewCell

@property (nonatomic, strong) NSString *model;//这里为了简洁就不引入Model新类，用String先代替

+ (float)cellHeight;

@end

//
// CustomCell.m
//
#import "CustomCell.h"
#import "CustomView.h"

@interface CustomCell() {
    CustomView *cView;
}
@end

@implementation CustomCell

@synthesize model = _model;

- (id)initWithStyle:(UITableViewCellStyle)style reuseIdentifier:(NSString *)reuseIdentifier
{
    self = [super initWithStyle:style reuseIdentifier:reuseIdentifier];
    if (self) {
        [cView removeFromSuperview];
        //*******************************************************************************
        //实例化 cView 并添加到 cell的contentView 上
        //那些不需要响应点击等事件的元素都可以绘制到CustomView上
        //需要响应点击事件等的UIView，如UIButton则需要addSubview到self.contentView上
        //*******************************************************************************
        cView = [[CustomView alloc] initWithFrame:CGRectMake(0, 0, self.frame.size.width, [CustomCell cellHeight])];
        [self.contentView addSubview:cView];
    }
    return self;
}

- (void)setSelected:(BOOL)selected animated:(BOOL)animated
{
    [super setSelected:selected animated:animated];
}

- (void)setModel:(NSString *)model{
    _model = model;
    //*******************************************************************************
    //设置cView 的model属性， 由于CustomView 实现了- (void)setModel:(NSString *)model; 同时也会调用这个方法
    //*******************************************************************************
    cView.model = _model;
}

+ (float)cellHeight{
    return 60;//如果你需要高度随内容变化的cell，在这里返回高度计算结果
}


//
// ViewController.h
//
#import <UIKit/UIKit.h>

@interface ViewController : UIViewController

@end

//
// ViewController.m
//
#import "ViewController.h"
#import "CustomCell.h"

//*******************************************************************************
//这里我们添加UITableView 的两个委托 
//*******************************************************************************
@interface ViewController ()<UITableViewDataSource, UITableViewDelegate>{
    NSArray *dataArray;
}

@end

@implementation ViewController

- (void)viewDidLoad
{
    [super viewDidLoad];
    // Do any additional setup after loading the view, typically from a nib.
    CGRect frame = [self.view bounds];
    
    //*******************************************************************************
    //这里我们添加UITableView
    //*******************************************************************************
    UITableView *tableView = [[UITableView alloc] initWithFrame:CGRectMake(0, 0, frame.size.width, frame.size.height)];
    tableView.dataSource = self;
    tableView.delegate = self;
    [self.view addSubview:tableView];
    
    //*******************************************************************************
    //这里生成 UITableView的 模拟数据
    //*******************************************************************************
    dataArray = [NSArray arrayWithObjects:
                 @"Google",
                 @"百　度",
                 @"网　易",
                 @"微 博",
                 @"优 酷 网",
                 @"淘 宝 网",
                 @"亚 马 逊",
                 @"艺龙酒店",
                 @"美 团 网",
                 @"上品折扣",
                 @"C N T V",
                 @"腾  讯",
                 @"新  浪",
                 @"当　当",
                 @"凤 凰 网",
                 @"MSN中文网",
                 @"猫　扑", @"",nil];
    
    //下面刷新tableView
    //*******************************************************************************
    [tableView reloadData];
}

#pragma mark -------------------
#pragma mark UITableViewDataSource
//委托里 @required 的必须实现

- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section{
    //返回cell的数量
    return [dataArray count];
}

- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath{
    //定义用于重用Cell的CellIdentifier
    static NSString *CellIdentifier = @"UITableViewCell";
    //用CellIdentifier 取cell
    
    //这里我们使用我们自定义的Cell，具体内容到CustomCell.m实现文件中查看
    //*******************************************************************************
    CustomCell *cell = [tableView dequeueReusableCellWithIdentifier:CellIdentifier];
    //如果有可重用的cell，则跳过if 否则 实例化一个
    if (cell == nil) {
        cell = [[CustomCell alloc] initWithStyle:UITableViewCellStyleDefault reuseIdentifier:CellIdentifier];
    }
    //config the cell
    //使用数据源 dataArray 给cell 赋值
    cell.model = [dataArray objectAtIndex:indexPath.row];
    
    return cell;
}


#pragma mark -------------------
#pragma mark UITableViewDelegate
- (CGFloat)tableView:(UITableView *)tableView heightForRowAtIndexPath:(NSIndexPath *)indexPath{
    //返回在CustomCell中定义的cell的高度
    return [CustomCell cellHeight];
}

- (void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath{
    NSLog(@"您点击了Cell%d: %@", indexPath.row, [dataArray objectAtIndex:indexPath.row]);
}

//
// AppDelegate.h
//
#import <UIKit/UIKit.h>

@class ViewController;

@interface AppDelegate : UIResponder <UIApplicationDelegate>

@property (strong, nonatomic) UIWindow *window;

@property (strong, nonatomic) ViewController *viewController;

@end

//
// AppDelegate.m
//
#import "ViewController.h"
#import "CustomCell.h"

//*******************************************************************************
//这里我们添加UITableView 的两个委托 
//*******************************************************************************
@interface ViewController ()<UITableViewDataSource, UITableViewDelegate> {
    NSArray *dataArray;
}

@end

@implementation ViewController

- (void)viewDidLoad
{
    [super viewDidLoad];
    // Do any additional setup after loading the view, typically from a nib.
    CGRect frame = [self.view bounds];
    
    //*******************************************************************************
    //这里我们添加UITableView
    //*******************************************************************************
    UITableView *tableView = [[UITableView alloc] initWithFrame:CGRectMake(0, 0, frame.size.width, frame.size.height)];
    tableView.dataSource = self;
    tableView.delegate = self;
    [self.view addSubview:tableView];
    
    //*******************************************************************************
    //这里生成 UITableView的 模拟数据
    //*******************************************************************************
    dataArray = [NSArray arrayWithObjects:
                 @"Google",
                 @"百　度",
                 @"网　易",
                 @"微 博",
                 @"优 酷 网",
                 @"淘 宝 网",
                 @"亚 马 逊",
                 @"艺龙酒店",
                 @"美 团 网",
                 @"上品折扣",
                 @"C N T V",
                 @"腾  讯",
                 @"新  浪",
                 @"当　当",
                 @"凤 凰 网",
                 @"MSN中文网",
                 @"猫　扑", @"",nil];
    
    //下面刷新tableView
    //*******************************************************************************
    [tableView reloadData];
}

- (void)didReceiveMemoryWarning
{
    [super didReceiveMemoryWarning];
    // Dispose of any resources that can be recreated.
}

#pragma mark -------------------
#pragma mark UITableViewDataSource
//委托里 @required 的必须实现

- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section{
    //返回cell的数量
    return [dataArray count];
}

- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath{
    //定义用于重用Cell的CellIdentifier
    static NSString *CellIdentifier = @"UITableViewCell";
    //用CellIdentifier 取cell
    
    //这里我们使用我们自定义的Cell，具体内容到CustomCell.m实现文件中查看
    //*******************************************************************************
    CustomCell *cell = [tableView dequeueReusableCellWithIdentifier:CellIdentifier];
    //如果有可重用的cell，则跳过if 否则 实例化一个
    if (cell == nil) {
        cell = [[CustomCell alloc] initWithStyle:UITableViewCellStyleDefault reuseIdentifier:CellIdentifier];
    }
    //config the cell
    //使用数据源 dataArray 给cell 赋值
    cell.model = [dataArray objectAtIndex:indexPath.row];
    
    return cell;
}


#pragma mark -------------------
#pragma mark UITableViewDelegate
- (CGFloat)tableView:(UITableView *)tableView heightForRowAtIndexPath:(NSIndexPath *)indexPath{
    //返回在CustomCell中定义的cell的高度
    return [CustomCell cellHeight];
}

- (void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath{
    NSLog(@"您点击了Cell%d: %@", indexPath.row, [dataArray objectAtIndex:indexPath.row]);
}


9、UINavigationController:
================================================================================
//
// LLViewController.h
//
#import <UIKit/UIKit.h>

@interface LLViewController : UIViewController

@end

//
// LLViewController.m
//
#import "LLViewController.h"

@implementation LLViewController

- (id)initWithNibName:(NSString *)nibNameOrNil bundle:(NSBundle *)nibBundleOrNil
{
    self = [super initWithNibName:nibNameOrNil bundle:nibBundleOrNil];
    if (self) {
        // Custom initialization
    }
    return self;
}

- (void)viewDidLoad
{
    [super viewDidLoad];
    // Do any additional setup after loading the view.
    UIButton *popBtn = [[UIButton alloc] initWithFrame:CGRectMake(10, 200, 100, 60)];
    [popBtn addTarget:self action:@selector(popVC:) forControlEvents:UIControlEventTouchUpInside];
    [popBtn setTitle:@"popVC" forState:UIControlStateNormal];
    popBtn.backgroundColor = [UIColor redColor];
    [self.view addSubview:popBtn];
}

- (void)popVC:(UIButton*)btn{
    //由于是push过来的，这里使用pop方式导航回去
    //*******************************************************************************
    [self.navigationController popViewControllerAnimated:YES];
    //*******************************************************************************
}

//
// MMViewController.h
//
#import <UIKit/UIKit.h>

@interface MMViewController : UIViewController

@end

//
// MMViewController.m
//
#import "MMViewController.h"

@implementation MMViewController

- (id)initWithNibName:(NSString *)nibNameOrNil bundle:(NSBundle *)nibBundleOrNil
{
    self = [super initWithNibName:nibNameOrNil bundle:nibBundleOrNil];
    if (self) {
        // Custom initialization
    }
    return self;
}

- (void)viewDidLoad
{
    [super viewDidLoad];
    // Do any additional setup after loading the view.
    
    UIButton *dismissVCBtn = [[UIButton alloc] initWithFrame:CGRectMake(10, 200, 100, 60)];
    [dismissVCBtn addTarget:self action:@selector(dismissVC:) forControlEvents:UIControlEventTouchUpInside];
    [dismissVCBtn setTitle:@"dismissVC" forState:UIControlStateNormal];
    dismissVCBtn.backgroundColor = [UIColor redColor];
    [self.view addSubview:dismissVCBtn];
}

- (void)dismissVC:(UIButton*)btn{
    //由于是present过来的，这里使用dismiss方式回去
    //*******************************************************************************
    [self dismissViewControllerAnimated:YES completion:^{}];
    //*******************************************************************************
}

//
// ViewController.h
//
#import <UIKit/UIKit.h>

@interface ViewController : UIViewController

@end

//
// ViewController.m
//
#import "ViewController.h"
#import "LLViewController.h"
#import "MMViewController.h"

@implementation ViewController

- (void)viewDidLoad
{
    [super viewDidLoad];
    // Do any additional setup after loading the view, typically from a nib.
    //*******************************************************************************
    //这里我非常不喜欢系统导航栏，太丑，把它隐藏了
    [self.navigationController.navigationBar setHidden:YES];
    //*******************************************************************************
    
    //这里使用导航方式跳转到LLViewController，这种方式 ViewController 必须是在UINavigationController 的导航堆栈中
    //*******************************************************************************
    UIButton *pushuBtn = [[UIButton alloc] initWithFrame:CGRectMake(10, 200, 100, 60)];
    [pushuBtn addTarget:self action:@selector(pushuToVC:) forControlEvents:UIControlEventTouchUpInside];
    [pushuBtn setTitle:@"pushuToVC" forState:UIControlStateNormal];
    pushuBtn.backgroundColor = [UIColor redColor];
    [self.view addSubview:pushuBtn];
    //*******************************************************************************

    //这里使用展示方式跳转到LLViewController，这种方式随时可以使用，无限制
    //*******************************************************************************
    UIButton *presentBtn = [[UIButton alloc] initWithFrame:CGRectMake(10, 300, 100, 60)];
    [presentBtn addTarget:self action:@selector(presentVC:) forControlEvents:UIControlEventTouchUpInside];
    [presentBtn setTitle:@"presentVC" forState:UIControlStateNormal];
    presentBtn.backgroundColor = [UIColor redColor];
    [self.view addSubview:presentBtn];
    //*******************************************************************************
}

- (void)pushuToVC:(UIButton*)btn{
    //这里使用导航方式跳转到LLViewController
    LLViewController *viewController = [[LLViewController alloc] init];
    [self.navigationController pushViewController:viewController animated:YES];
}

- (void)presentVC:(UIButton*)btn{
    //这里使用展示方式跳转到LLViewController
    MMViewController *viewController = [[MMViewController alloc] init];
    [self presentViewController:viewController animated:YES completion:^{
    
    }];
}

//
// AppDelegate.h
//
#import <UIKit/UIKit.h>

@class ViewController;

@interface AppDelegate : UIResponder <UIApplicationDelegate>

@property (strong, nonatomic) UIWindow *window;

@property (strong, nonatomic) ViewController *viewController;

@end

//
// AppDelegate.m
//
#import "AppDelegate.h"
#import "ViewController.h"

@implementation AppDelegate

- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions
{
    self.window = [[UIWindow alloc] initWithFrame:[[UIScreen mainScreen] bounds]];
    // Override point for customization after application launch.
    self.viewController = [[ViewController alloc] initWithNibName:@"ViewController" bundle:nil];
    
    //*******************************************************************************
    //这句是不可以使用导航方式跳转ViewController的
    //self.window.rootViewController = self.viewController;
    //改成下面这句，就可以了
    self.window.rootViewController = [[UINavigationController alloc] initWithRootViewController:self.viewController];
    //*******************************************************************************
    
    [self.window makeKeyAndVisible];
    return YES;
}


10、UITabBarController:
================================================================================
//
// LLViewController.h
//
#import <UIKit/UIKit.h>

@interface LLViewController : UIViewController

@end

//
// LLViewController.m
//
#import "LLViewController.h"

@interface LLViewController ()

@end

@implementation LLViewController

- (id)initWithNibName:(NSString *)nibNameOrNil bundle:(NSBundle *)nibBundleOrNil
{
    self = [super initWithNibName:nibNameOrNil bundle:nibBundleOrNil];
    if (self) {
        // Custom initialization
    }
    return self;
}

- (void)viewDidLoad
{
    [super viewDidLoad];
    // Do any additional setup after loading the view.
    //这里设置一些区别，方便切换时观察效果
    //*******************************************************************************
    self.title = @"联系人";
    self.view.backgroundColor = [UIColor colorWithRed:0.5 green:0.5 blue:0 alpha:0.5];
}

//
// MMViewController.h
//
#import <UIKit/UIKit.h>

@interface MMViewController : UIViewController

@end

//
// MMViewController.m
//
#import "MMViewController.h"

@implementation MMViewController

- (id)initWithNibName:(NSString *)nibNameOrNil bundle:(NSBundle *)nibBundleOrNil
{
    self = [super initWithNibName:nibNameOrNil bundle:nibBundleOrNil];
    if (self) {
        // Custom initialization
    }
    return self;
}

- (void)viewDidLoad
{
    [super viewDidLoad];
    // Do any additional setup after loading the view.
    //这里设置一些区别，方便切换时观察效果
    //*******************************************************************************
    self.title = @"书签";
    self.view.backgroundColor = [UIColor colorWithRed:0 green:0.5 blue:0.5 alpha:0.5];
}

//
// ViewController.h
//

//
// ViewController.m
//

//
// AppDelegate.h
//
#import <UIKit/UIKit.h>

@interface AppDelegate : UIResponder <UIApplicationDelegate>

@property (strong, nonatomic) UIWindow *window;

@end

//
// AppDelegate.m
//
#import "AppDelegate.h"
#import "LLViewController.h"
#import "MMViewController.h"

@implementation AppDelegate

- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions
{
    self.window = [[UIWindow alloc] initWithFrame:[[UIScreen mainScreen] bounds]];
    // Override point for customization after application launch.
    //*******************************************************************************
    //在上个Demo中我们学习 UIViewController的两种跳转方式 导航和展示
    //这里我们学习 UITabBarViewController 的使用
    //*******************************************************************************
    
    
    LLViewController *LLVC = [[LLViewController alloc] init];
    MMViewController *MMVC = [[MMViewController alloc] init];
    
    //设置LLVC MMVC 各自在第几个Tab上 和tab的图标
    //*******************************************************************************
//    UITabBarSystemItemMore,
//    UITabBarSystemItemFavorites,
//    UITabBarSystemItemFeatured,
//    UITabBarSystemItemTopRated,
//    UITabBarSystemItemRecents,
//    UITabBarSystemItemContacts,
//    UITabBarSystemItemHistory,
//    UITabBarSystemItemBookmarks,
//    UITabBarSystemItemSearch,
//    UITabBarSystemItemDownloads,
//    UITabBarSystemItemMostRecent,
//    UITabBarSystemItemMostViewed,
    
    LLVC.tabBarItem = [[UITabBarItem alloc] initWithTabBarSystemItem:UITabBarSystemItemContacts tag:0];
    MMVC.tabBarItem = [[UITabBarItem alloc] initWithTabBarSystemItem:UITabBarSystemItemBookmarks tag:1];
    //*******************************************************************************

    //把LLVC MMVC 设置成LLNav MMNav 的根VC，这样就可以在LLVC MMVC中使用pushViewController的方法了
    //*******************************************************************************
    UINavigationController *LLNav = [[UINavigationController alloc] initWithRootViewController:LLVC];
    UINavigationController *MMNav = [[UINavigationController alloc] initWithRootViewController:MMVC];
    
    //把LLNav MMNav生成一个数组，赋值给tabbarVC.viewControllers
    UITabBarController *tabbarVC = [[UITabBarController alloc] init];
    tabbarVC.viewControllers = [NSArray arrayWithObjects:LLNav, MMNav, nil];
    
    //设置tabbarVC 为winddow的rootViewController
    self.window.rootViewController = tabbarVC;
    
    self.window.backgroundColor = [UIColor whiteColor];
    [self.window makeKeyAndVisible];
    return YES;
}